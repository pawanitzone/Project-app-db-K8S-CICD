apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-deployment
  labels:
    app: db-pod

spec:
  template:
     metadata:
       name: db-pod
       labels:
         app: db-pod
     spec:
       initContainers:
       - name: init-mysql
         image: pawanitzone/mydb
         command:
         - bash
         - "-c"
         - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
         volumeMounts:
         - name: conf
           mountPath: /mnt/conf.d
         - name: config-map
           mountPath: /mnt/config-map
      
       containers:
         - name: db-pod
           image: pawanitzone/mydb
           #env:
           #  - name: MYSQL_ROOT_PASSWORD
           #    valueFrom:
           #     secretKeyRef:
           #      name: mysql-pass
           #      key: password

           volumeMounts:
           - mountPath: /var/lib/mysql
             name: db-volume
             subPath: mysql
           ports:
             - containerPort: 3306
             
           livenessProbe:
            exec:
             command: ["mysqladmin", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
           
           readinessProbe:
            exec:
             # Check we can execute queries over TCP (skip-networking is off).
             command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
          
       volumes:
        - name: db-volume
          persistentVolumeClaim:
            claimName: db-pvc-claim
        - name: conf
          emptyDir: {}
        - name: config-map
          configMap:
           name: mysql    
  replicas: 2
  serviceName: db-service
  selector:
    matchLabels:
      app: db-pod
